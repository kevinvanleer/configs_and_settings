# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# window commands
alt - 0x33 : yabai -m window --close
#alt - tab : yabai -m window --focus recent
alt - tab : yabai -m window --focus prev || yabai -m window --focus last
alt - 0x2B : yabai -m window --focus prev 
alt - 0x2F : yabai -m window --focus next 
alt - w : yabai -m window --focus north 
alt - a : yabai -m window --focus west 
alt - d : yabai -m window --focus east 
alt - s : yabai -m window --focus south 

# swap windows
alt + shift - w : yabai -m window --swap north
alt + shift - a : yabai -m window --swap west
alt + shift - s : yabai -m window --swap south
alt + shift - d : yabai -m window --swap east

# rotate space
alt - 0x21 : yabai -m space --rotate 90
alt - 0x1E : yabai -m space --rotate 270

# mirror space
# 2A -> PIPE `|`
# 1B -> DASH `-`
alt - 0x2A : yabai -m space --mirror y-axis 
alt - 0x1B : yabai -m space --mirror x-axis 

# control window top/left
alt + shift - u : yabai -m window --resize top:0:-20
alt + shift - h : yabai -m window --resize left:-20:0
alt + shift - j : yabai -m window --resize top:0:+20
alt + shift - k : yabai -m window --resize left:+20:0

# control window bottom/right
alt + ctrl - u : yabai -m window --resize bottom:0:-20
alt + ctrl - h : yabai -m window --resize right:0:-20
alt + ctrl - j : yabai -m window --resize bottom:0:+20
alt + ctrl - k : yabai -m window --resize right:0:+20

# display commands
cmd - tab: yabai -m display --focus recent
0x6E : yabai -m display --focus recent
cmd + alt - tab  : yabai -m window --display recent; yabai -m display --focus recent
cmd + alt - space  : yabai -m window --display recent; yabai -m display --focus recent
cmd + alt - 0x2B  : yabai -m window --display prev; yabai -m display --focus prev
cmd + alt - 0x2F : yabai -m window --display next; yabai -m display --focus next

# space commands
ctrl - tab: yabai -m space --focus recent
ctrl - 0x2B: yabai -m space --focus prev 
ctrl - 0x2F: yabai -m space --focus next 

ctrl - 1: yabai -m space --focus 1 
ctrl - 2: yabai -m space --focus 2
ctrl - 3: yabai -m space --focus 3
ctrl - 4: yabai -m space --focus 4
ctrl - 5: yabai -m space --focus 5
ctrl - 6: yabai -m space --focus 6
ctrl - 7: yabai -m space --focus 7
ctrl - 8: yabai -m space --focus 8
ctrl - 9: yabai -m space --focus 9
ctrl - 0: yabai -m space --focus 0

ctrl + shift - 1: yabai -m space --focus $(yabai -m query --spaces --display 2 | jq 'sort_by(.index)[0].index')
ctrl + shift - 2: yabai -m space --focus $(yabai -m query --spaces --display 2 | jq 'sort_by(.index)[1].index')
ctrl + shift - 3: yabai -m space --focus $(yabai -m query --spaces --display 2 | jq 'sort_by(.index)[2].index')
ctrl + shift - 4: yabai -m space --focus $(yabai -m query --spaces --display 2 | jq 'sort_by(.index)[3].index')
ctrl + shift - 5: yabai -m space --focus $(yabai -m query --spaces --display 2 | jq 'sort_by(.index)[4].index')
ctrl + shift - 6: yabai -m space --focus $(yabai -m query --spaces --display 2 | jq 'sort_by(.index)[5].index')
ctrl + shift - 7: yabai -m space --focus $(yabai -m query --spaces --display 2 | jq 'sort_by(.index)[6].index')
ctrl + shift - 8: yabai -m space --focus $(yabai -m query --spaces --display 2 | jq 'sort_by(.index)[7].index')
ctrl + shift - 9: yabai -m space --focus $(yabai -m query --spaces --display 2 | jq 'sort_by(.index)[8].index')
ctrl + shift - 0: yabai -m space --focus $(yabai -m query --spaces --display 2 | jq 'sort_by(.index)[9].index')

#Focus first space on second display
ctrl - end: yabai -m space --focus $(yabai -m query --spaces --display 2 | jq 'sort_by(.index)[0].index')

## swap space with prev/next
ctrl + shift - 0x2B: yabai -m space --swap prev 
ctrl + shift - 0x2F: yabai -m space --swap next 
## move window to prev/next space
ctrl + alt - 0x2B : yabai -m window --space prev; yabai -m space --focus prev
ctrl + alt - 0x2F : yabai -m window --space next; yabai -m space --focus next

## set targeted space; 0x32 = ~
ctrl + shift - 0x32 : yabai -m space --label TARGET
## focus targeted space; 0x73 = HOME
ctrl - 0x32 : yabai -m space --focus TARGET

## set home screen
ctrl + shift - home : yabai -m space --label HOME
## jump to home screen
ctrl - home : yabai -m space --focus HOME

## destroy space; 0x33 = BACKSPACE
ctrl - 0x33 : yabai -m space --label DESTROY ; yabai -m space --focus prev ; yabai -m space --destroy DESTROY

## move window to targeted space
alt - space : yabai -m window --space TARGET ; yabai -m space --focus TARGET; yabai -m space recent --label TARGET
alt + ctrl - 0x32 : yabai -m window --space TARGET ; yabai -m space --focus TARGET; yabai -m space recent --label TARGET

## swap with targeted space
ctrl + shift - tab : yabai -m space --swap TARGET

## append space space and focus; 0x18 = +
ctrl - 0x18 : yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                  yabai -m space --focus "${index}"

# insert space
ctrl - insert : yabai -m space --label ANCHOR ;  yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                  yabai -m space "${index}" --move ANCHOR

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
ctrl + shift - 0x18 : yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                  yabai -m window --space "${index}" && \
                  yabai -m space --focus "${index}"



# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# alt - h : yabai -m window --focus west

# swap managed window
# alt + shift - h : yabai -m window --swap north

# move managed window
# cmd + shift - h : yabai -m window --warp east

# balance size of windows
alt + shift - 0 : yabai -m space --balance

# make floating window fill screen
alt + shift - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
alt + shift - left   : yabai -m window --grid 1:2:0:0:1:1

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# cmd + shift - z : yabai -m window --space next; yabai -m space --focus next
# cmd + shift - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
alt - p : yabai -m window --toggle sticky --toggle topmost --toggle pip


# open terminal
alt - v : neovide
alt - return : open -n /Applications/Alacritty.app
alt - c : open -na "Google Chrome"
alt - i : open -na "Google Chrome" --args --incognito
